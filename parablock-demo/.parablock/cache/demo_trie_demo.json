{
  "demo.trie_demo.build_prefix_tree": {
    "hash": "4b67d1ec7fd27e1add244cd42a05dcbb",
    "implementation": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end_of_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end_of_word = True\n\n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return node.is_end_of_word\n\n    def starts_with(self, prefix):\n        node = self.root\n        for char in prefix:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return True\n\n    def get_autocomplete_suggestions(self, prefix, max_suggestions):\n        def dfs(node, prefix):\n            if node.is_end_of_word:\n                suggestions.append(prefix)\n            for char, child in node.children.items():\n                dfs(child, prefix + char)\n\n        suggestions = []\n        node = self.root\n        for char in prefix:\n            if char not in node.children:\n                return []\n            node = node.children[char]\n        dfs(node, prefix)\n        return suggestions[:max_suggestions]\n\ntrie = Trie()\nfor word in words:\n    trie.insert(word)\nreturn trie"
  }
}